---
# This playbook generates the load on the cockroachdb application already deployed on the cluster.
# Steps:
# 1) Create litmus-result customr resource for logging.
# 2) Create cockroachdb loadgen job
# 3) Verify if the corresponding pod is running successfully.

- hosts: localhost
  connection: local

  vars_files: 
    - test_vars.yml

  tasks:

    - block:

                ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect SOT (Start of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: in-progress
            verdict: none

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0"

        - name: Replace the arguments with values in loadgen yaml
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'svc_namespace'
            replace: "{{ lookup('env','APP_NS') }}"

        - name: Replace the service name in loadgen yaml
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'svc_name'
            replace: "{{ lookup('env','SVC_NAME') }}"

        - name: Update the time interval in loadgen yaml
          replace:
            path: "{{ cockroachdb_loadgen }}"
            regexp: 'time_duration'
            replace: "{{ lookup('env','TIME_INTERVAL') }}"

        - name: Creating cockroachdb loadgen job
          shell: kubectl apply -f {{ cockroachdb_loadgen }} -n {{ namespace }}
          args:
            executable: /bin/bash
          register: result
          failed_when: 'result.rc != 0'

        - name: Obtain the cockroachdb pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l app=cockroachdb -o jsonpath='{.items[0].metadata.name}'
          args:
            executable: /bin/bash
          register: pod_name

        - name: Verify the data written
          shell: >
            kubectl exec -it {{ pod_name.stdout }} -n {{ namespace }} -- /cockroach/cockroach sql --insecure 
            --host=cockroachdb-public.cockroachdb -d test -e 'show tables;' 
          args:
            executable: /bin/bash
          register: tables
          until: "'kv' in tables.stdout"
          delay: 60
          retries: 5
        
        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - name: Generate the litmus result CR to reflect EOT (End of Test)
          template:
            src: /litmus-result.j2
            dest: litmus-result.yaml
          vars:
            test: "{{ test_name }}"
            app: ""
            chaostype: ""
            phase: completed
            verdict: "{{ flag }}"

        - name: Apply the litmus result CR
          shell: kubectl apply -f litmus-result.yaml
          args:
            executable: /bin/bash
          register: lr_status
          failed_when: "lr_status.rc != 0" 

